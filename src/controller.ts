import { CodeReviewPlatform, createPlatformAdapter } from './adapter';
import { ReviewComment, analyzeCodeContent, generateReplyForComment, parseDiffToChangedLines } from './utils';
import * as dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∫–æ–¥-—Ä–µ–≤—å—é
 */
export interface CodeReviewControllerConfig {
  platform: 'github' | 'gitlab';
  platformOptions: {
    token: string;
    repository?: string;
    projectId?: string;
    apiUrl?: string;
  };
  deepseekApiKey: string;
  deepseekApiUrl: string;
}

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∫–æ–¥-—Ä–µ–≤—å—é
 */
export class CodeReviewController {
  private platform: CodeReviewPlatform;
  private config: CodeReviewControllerConfig;

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –∫–æ–¥-—Ä–µ–≤—å—é
   * @param config –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
   */
  constructor(config: CodeReviewControllerConfig) {
    this.config = config;
    this.platform = createPlatformAdapter(config.platform, config.platformOptions);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ Pull Request / Merge Request
   * @param prId ID Pull Request / Merge Request
   */
  async handlePullRequestEvent(prId: number | string): Promise<void> {
    console.log(`Analyzing ${this.config.platform === 'github' ? 'PR' : 'MR'} #${prId}...`);

    // –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    const files = await this.platform.getChangedFiles(prId);
    console.log(`Found ${files.length} changed files`);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    const allComments: ReviewComment[] = [];

    for (const file of files) {
      console.log(`Analyzing file: ${file.path}`);
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        const fileComments = await analyzeCodeContent(
          file.path,
          file.content,
          this.config.deepseekApiKey,
          this.config.deepseekApiUrl
        );

        // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º —Å—Ç—Ä–æ–∫–∞–º
        if (file.patch) {
          const changedLines = parseDiffToChangedLines(file.patch);
          const validComments = fileComments.filter(comment => changedLines.has(comment.line));

          console.log(`Found ${fileComments.length} issues, ${validComments.length} in changed lines`);
          allComments.push(...validComments);
        } else {
          console.log(`Found ${fileComments.length} issues (no patch available)`);
          allComments.push(...fileComments);
        }
      } catch (error) {
        console.error(`Error analyzing file ${file.path}:`, error);
      }
    }

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–≤—å—é —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
    if (allComments.length > 0) {
      console.log(`Creating ${allComments.length} review comments`);
      await this.platform.createReview(prId, allComments);
      console.log('Review created successfully');
    } else {
      console.log('No issues found, no review created');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ PR/MR
   * @param commentId ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
   */
  async handleCommentEvent(commentId: string | number): Promise<void> {
    console.log(`Processing comment ${commentId}...`);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      const comment = await this.platform.getComment(commentId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É
      if (!comment.body.match(/^(@ai|\/ai)\s/i)) {
        console.log('Comment does not start with @ai or /ai, ignoring');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ PR/MR
      const allComments = await this.platform.listComments(comment.prId);

      // –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –±–æ—Ç–∞ –≤ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ
      const parentComment = allComments
        .reverse()
        .find(c =>
          c.id !== comment.id &&
          c.path === comment.path &&
          c.line === comment.line &&
          c.body.match(/### (üìù|üîí|‚ö°) (Quality|Security|Performance)/i)
        );

      if (!parentComment) {
        console.error('Could not find parent bot comment');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
      // –í GitLab MR, –≤ GitHub PR
      const ref = this.config.platform === 'github'
        ? `pull/${comment.prId}/head`
        : `refs/merge-requests/${comment.prId}/head`;

      const fileContent = await this.platform.getFileContent(comment.path, ref);

      // –£–±–∏—Ä–∞–µ–º @ai –∏–ª–∏ /ai –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
      const question = comment.body.replace(/^(@ai|\/ai)\s+/i, '');

      console.log('Generating reply...');

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      const answer = await generateReplyForComment(
        comment.path,
        fileContent,
        comment.line,
        question,
        parentComment.body,
        this.config.deepseekApiKey,
        this.config.deepseekApiUrl
      );

      console.log('Sending reply...');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
      const replyBody = `> ${question}\n\n${answer}\n\n*–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å @ai –∏–ª–∏ /ai*`;
      await this.platform.replyToComment(comment.prId, commentId, replyBody);

      console.log('Reply sent successfully');
    } catch (error) {
      console.error('Error handling comment:', error);
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
   * @param eventType –¢–∏–ø —Å–æ–±—ã—Ç–∏—è ('pull_request', 'merge_request', 'comment', 'note')
   * @param eventData –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è 
   */
  async processEvent(eventType: string, eventData: any): Promise<void> {
    console.log(`Processing ${eventType} event`);

    try {
      switch (eventType) {
        case 'pull_request': // GitHub
          await this.handlePullRequestEvent(eventData.pull_request.number);
          break;

        case 'merge_request': // GitLab
          await this.handlePullRequestEvent(eventData.object_attributes.iid);
          break;

        case 'pull_request_review_comment': // GitHub comment
          await this.handleCommentEvent(eventData.comment.id);
          break;

        case 'note': // GitLab comment
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ MR, –∞ –Ω–µ –∫ Issue –∏–ª–∏ Commit
          if (eventData.object_attributes.noteable_type === 'MergeRequest') {
            // –í GitLab –º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞—Ç—å —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            const commentId = `${eventData.merge_request.iid}:${eventData.object_attributes.discussion_id}:${eventData.object_attributes.id}`;
            await this.handleCommentEvent(commentId);
          } else {
            console.log(`Ignoring note for ${eventData.object_attributes.noteable_type}`);
          }
          break;

        default:
          console.log(`Unsupported event type: ${eventType}`);
      }
    } catch (error) {
      console.error('Error processing event:', error);
      throw error;
    }
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
export function createControllerFromEnv(): CodeReviewController {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;
  const DEEPSEEK_API_URL = process.env.DEEPSEEK_API_URL || 'https://api.deepseek.com/v1/chat/completions';

  if (!DEEPSEEK_API_KEY) {
    throw new Error('DEEPSEEK_API_KEY is required');
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  if (process.env.GITHUB_TOKEN && process.env.GITHUB_REPOSITORY) {
    // GitHub –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    return new CodeReviewController({
      platform: 'github',
      platformOptions: {
        token: process.env.GITHUB_TOKEN,
        repository: process.env.GITHUB_REPOSITORY,
      },
      deepseekApiKey: DEEPSEEK_API_KEY,
      deepseekApiUrl: DEEPSEEK_API_URL,
    });
  } else if (process.env.GITLAB_TOKEN && process.env.GITLAB_PROJECT_ID) {
    // GitLab –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    return new CodeReviewController({
      platform: 'gitlab',
      platformOptions: {
        token: process.env.GITLAB_TOKEN,
        projectId: process.env.GITLAB_PROJECT_ID,
        apiUrl: process.env.GITLAB_API_URL || 'https://gitlab.com/api/v4',
      },
      deepseekApiKey: DEEPSEEK_API_KEY,
      deepseekApiUrl: DEEPSEEK_API_URL,
    });
  } else {
    throw new Error('Missing platform configuration. Set either GITHUB_TOKEN and GITHUB_REPOSITORY or GITLAB_TOKEN and GITLAB_PROJECT_ID');
  }
} 