import { Octokit } from '@octokit/rest';
import * as dotenv from 'dotenv';
import fetch from 'node-fetch';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;
const PR_NUMBER = process.env.PR_NUMBER;
const GITHUB_REPOSITORY = process.env.GITHUB_REPOSITORY;

if (!GITHUB_TOKEN) {
  throw new Error('GITHUB_TOKEN is required');
}

if (!DEEPSEEK_API_KEY) {
  throw new Error('DEEPSEEK_API_KEY is required');
}

if (!PR_NUMBER) {
  throw new Error('PR_NUMBER is required');
}

if (!GITHUB_REPOSITORY) {
  throw new Error('GITHUB_REPOSITORY is required');
}

const [owner, repo] = GITHUB_REPOSITORY.split('/');

const octokit = new Octokit({
  auth: GITHUB_TOKEN,
});

const DEEPSEEK_API_URL = 'https://api.deepseek.com/v1/chat/completions';

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
const MAX_RETRIES = 3;
const RETRY_DELAY = 1000;

interface PullRequestInfo {
  owner: string;
  repo: string;
  pull_number: number;
}

interface CodeAnalysis {
  quality: string[];
  security: string[];
  performance: string[];
}

interface DeepSeekResponse {
  choices: Array<{
    message: {
      content: string;
    };
  }>;
}

interface ConversationContext {
  filePath: string;
  lineStart: number;
  lineEnd: number;
  code: string;
  messages: Array<{
    role: 'user' | 'assistant';
    content: string;
  }>;
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
const conversationContexts = new Map<string, ConversationContext>();

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
async function withRetry<T>(operation: () => Promise<T>, retries = MAX_RETRIES): Promise<T> {
  try {
    return await operation();
  } catch (error) {
    if (retries > 0) {
      console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ (–æ—Å—Ç–∞–ª–æ—Å—å ${retries})...`);
      await delay(RETRY_DELAY);
      return withRetry(operation, retries - 1);
    }
    throw error;
  }
}

function chunkDiff(diff: string, maxChunkSize: number = 4000): string[] {
  if (!diff) {
    throw new Error('Diff is empty');
  }

  const lines = diff.split('\n');
  const chunks: string[] = [];
  let currentChunk: string[] = [];
  let currentSize = 0;

  for (const line of lines) {
    if (currentSize + line.length > maxChunkSize && currentChunk.length > 0) {
      chunks.push(currentChunk.join('\n'));
      currentChunk = [];
      currentSize = 0;
    }
    currentChunk.push(line);
    currentSize += line.length;
  }

  if (currentChunk.length > 0) {
    chunks.push(currentChunk.join('\n'));
  }

  return chunks;
}

async function getDiff({ owner, repo, pull_number }: PullRequestInfo): Promise<string> {
  const response = await withRetry(() => octokit.pulls.get({
    owner,
    repo,
    pull_number,
    mediaType: {
      format: 'diff',
    },
  }));

  if (typeof response.data === 'string') {
    return response.data;
  }

  throw new Error('Failed to get diff in correct format');
}

async function getCommentContext(owner: string, repo: string, comment_id: number): Promise<ConversationContext | null> {
  try {
    const { data: comment } = await withRetry(() => octokit.issues.getComment({
      owner,
      repo,
      comment_id,
    }));

    if (!comment?.body) {
      console.log('Comment body is empty');
      return null;
    }

    const prNumber = comment.issue_url.split('/').pop();
    if (!prNumber) {
      console.log('Could not extract PR number from URL');
      return null;
    }

    const { data: pr } = await withRetry(() => octokit.pulls.get({
      owner,
      repo,
      pull_number: parseInt(prNumber, 10),
    }));

    const contextKey = `${pr.number}-${comment_id}`;
    let context = conversationContexts.get(contextKey);

    if (!context) {
      const codeMatch = comment.body.match(/\`\`\`[\s\S]*?\`\`\`/);
      if (codeMatch) {
        context = {
          filePath: 'unknown',
          lineStart: 0,
          lineEnd: 0,
          code: codeMatch[0],
          messages: [{
            role: 'assistant',
            content: comment.body,
          }],
        };
        conversationContexts.set(contextKey, context);
      }
    }

    return context || null;
  } catch (error) {
    console.error('Error getting comment context:', error);
    return null;
  }
}

async function analyzeCodeWithDeepSeek(chunk: string, context?: ConversationContext): Promise<string> {
  if (!chunk) {
    throw new Error('Empty chunk provided for analysis');
  }

  const systemPrompt = context
    ? `–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞ –¥–ª—è React + TypeScript –ø—Ä–æ–µ–∫—Ç–æ–≤. –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞. 
       –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è:
       –§–∞–π–ª: ${context.filePath}
       –°—Ç—Ä–æ–∫–∏: ${context.lineStart}-${context.lineEnd}
       –ö–æ–¥:
       ${context.code}
       
       –ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:
       ${context.messages.map(m => `${m.role}: ${m.content}`).join('\n')}
       
       –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—á–∏—Ç—ã–≤–∞—è –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è.`
    : `–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞ –¥–ª—è React + TypeScript –ø—Ä–æ–µ–∫—Ç–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π diff –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–∑—ã–≤ –ø–æ —Ç—Ä–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
       1. –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —á–∏—Ç–∞–µ–º–æ—Å—Ç—å, —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º, –Ω–∞–ª–∏—á–∏–µ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏)
       2. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (—É—è–∑–≤–∏–º–æ—Å—Ç–∏, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)
       3. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ React, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º, –º–µ–º–æ–∏–∑–∞—Ü–∏—è, –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ö—É–∫–æ–≤)
       
       –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≤–∏–¥–µ JSON:
       {
         "quality": ["–ø—É–Ω–∫—Ç 1", "–ø—É–Ω–∫—Ç 2", ...],
         "security": ["–ø—É–Ω–∫—Ç 1", "–ø—É–Ω–∫—Ç 2", ...],
         "performance": ["–ø—É–Ω–∫—Ç 1", "–ø—É–Ω–∫—Ç 2", ...]
       }`;

  const response = await withRetry(() => fetch(DEEPSEEK_API_URL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${DEEPSEEK_API_KEY}`,
    },
    body: JSON.stringify({
      model: 'deepseek-chat',
      messages: [
        {
          role: 'system',
          content: systemPrompt,
        },
        {
          role: 'user',
          content: chunk,
        },
      ],
      response_format: context ? undefined : { type: 'json_object' },
      temperature: 0.3,
      max_tokens: 2000,
    }),
  }));

  if (!response.ok) {
    throw new Error(`DeepSeek API error: ${response.statusText}`);
  }

  const data = await response.json() as DeepSeekResponse;
  if (!data.choices?.[0]?.message?.content) {
    throw new Error('Invalid response from DeepSeek API');
  }

  return data.choices[0].message.content;
}

async function commentOnPR(prInfo: PullRequestInfo, analysis: CodeAnalysis) {
  const comment = formatAnalysisComment(analysis);
  await withRetry(() => octokit.issues.createComment({
    owner: prInfo.owner,
    repo: prInfo.repo,
    issue_number: prInfo.pull_number,
    body: comment,
  }));
}

function formatAnalysisComment(analysis: CodeAnalysis): string {
  if (!analysis.quality?.length && !analysis.security?.length && !analysis.performance?.length) {
    return `## ü§ñ AI Code Review

–ö–æ–¥ –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ! –Ø –Ω–µ –Ω–∞—à–µ–ª —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º.

---
*–≠—Ç–æ—Ç –æ—Ç–∑—ã–≤ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –ø–æ–º–æ—â—å—é AI Code Review.*`;
  }

  return `## ü§ñ AI Code Review

${analysis.quality.length ? `### üìù –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
${analysis.quality.map(item => `- ${item}`).join('\n')}` : ''}

${analysis.security.length ? `### üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
${analysis.security.map(item => `- ${item}`).join('\n')}` : ''}

${analysis.performance.length ? `### ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
${analysis.performance.map(item => `- ${item}`).join('\n')}` : ''}

---
*–≠—Ç–æ—Ç –æ—Ç–∑—ã–≤ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –ø–æ–º–æ—â—å—é AI Code Review.*`;
}

async function handlePRReview(prInfo: PullRequestInfo) {
  console.log(`–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é PR #${prInfo.pull_number}...`);

  const diff = await getDiff(prInfo);
  const chunks = chunkDiff(diff);

  console.log(`–†–∞–∑–±–∏–ª diff –Ω–∞ ${chunks.length} —á–∞—Å—Ç–µ–π`);

  const analyses = await Promise.all(chunks.map(chunk => analyzeCodeWithDeepSeek(chunk)));

  const analysis = analyses.reduce((acc, curr) => {
    const parsed = JSON.parse(curr) as CodeAnalysis;
    return {
      quality: [...acc.quality, ...parsed.quality],
      security: [...acc.security, ...parsed.security],
      performance: [...acc.performance, ...parsed.performance],
    };
  }, { quality: [], security: [], performance: [] } as CodeAnalysis);

  console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...');
  await commentOnPR(prInfo, analysis);
  console.log('–ì–æ—Ç–æ–≤–æ!');
}

async function handleCommentReply(owner: string, repo: string, comment_id: number, reply_to_id: number) {
  console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ${reply_to_id}...`);

  const context = await getCommentContext(owner, repo, reply_to_id);
  if (!context) {
    console.error('Could not find context for comment');
    return;
  }

  const { data: comment } = await withRetry(() => octokit.issues.getComment({
    owner,
    repo,
    comment_id,
  }));

  if (!comment?.body) {
    console.error('Comment body is empty');
    return;
  }

  context.messages.push({
    role: 'user',
    content: comment.body,
  });

  console.log('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å...');
  const response = await analyzeCodeWithDeepSeek(comment.body, context);

  context.messages.push({
    role: 'assistant',
    content: response,
  });

  const issueNumber = comment.issue_url.split('/').pop();
  if (!issueNumber) {
    throw new Error('Could not extract issue number from URL');
  }

  console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç...');
  await withRetry(() => octokit.issues.createComment({
    owner,
    repo,
    issue_number: parseInt(issueNumber, 10),
    body: response,
  }));

  console.log('–ì–æ—Ç–æ–≤–æ!');
}

async function main() {
  const [owner, repo] = GITHUB_REPOSITORY?.split('/') || [];
  const eventName = process.env.GITHUB_EVENT_NAME;

  if (!owner || !repo) {
    throw new Error('Missing repository information');
  }

  try {
    if (eventName === 'pull_request') {
      const pull_number = Number(PR_NUMBER);
      if (isNaN(pull_number)) {
        throw new Error(`Invalid PR number: ${PR_NUMBER}`);
      }
      await handlePRReview({ owner, repo, pull_number });
    } else if (eventName === 'issue_comment') {
      const comment_id = Number(process.env.COMMENT_ID);
      const reply_to_id = Number(process.env.REPLY_TO_ID);
      if (!comment_id || !reply_to_id) {
        throw new Error('Missing comment information');
      }
      await handleCommentReply(owner, repo, comment_id, reply_to_id);
    } else {
      throw new Error(`Unsupported event type: ${eventName}`);
    }
  } catch (error) {
    console.error('Error during code review:', error);
    process.exit(1);
  }
}

main(); 