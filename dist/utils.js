"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.delay = exports.RETRY_DELAY = exports.MAX_RETRIES = void 0;
exports.withRetry = withRetry;
exports.levenshteinDistance = levenshteinDistance;
exports.normalizeCode = normalizeCode;
exports.findMostSimilarLine = findMostSimilarLine;
exports.analyzeCodeContent = analyzeCodeContent;
exports.generateReplyForComment = generateReplyForComment;
exports.parseDiffToChangedLines = parseDiffToChangedLines;
const node_fetch_1 = __importDefault(require("node-fetch"));
// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
exports.MAX_RETRIES = 3;
exports.RETRY_DELAY = 1000;
// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));
exports.delay = delay;
// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
async function withRetry(operation, retries = exports.MAX_RETRIES) {
    try {
        return await operation();
    }
    catch (error) {
        if (retries > 0) {
            console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ (–æ—Å—Ç–∞–ª–æ—Å—å ${retries})...`);
            await (0, exports.delay)(exports.RETRY_DELAY);
            return withRetry(operation, retries - 1);
        }
        throw error;
    }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏
function levenshteinDistance(a, b) {
    const matrix = Array(b.length + 1).fill(null).map(() => Array(a.length + 1).fill(null));
    for (let i = 0; i <= a.length; i++)
        matrix[0][i] = i;
    for (let j = 0; j <= b.length; j++)
        matrix[j][0] = j;
    for (let j = 1; j <= b.length; j++) {
        for (let i = 1; i <= a.length; i++) {
            const substitutionCost = a[i - 1] === b[j - 1] ? 0 : 1;
            matrix[j][i] = Math.min(matrix[j][i - 1] + 1, // deletion
            matrix[j - 1][i] + 1, // insertion
            matrix[j - 1][i - 1] + substitutionCost // substitution
            );
        }
    }
    return matrix[b.length][a.length];
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞ (—É–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã, —Ç–∞–±—É–ª—è—Ü–∏—é –∏ —Ç.–¥.)
function normalizeCode(code) {
    return code.trim().replace(/\s+/g, ' ');
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–µ–π —Å—Ç—Ä–æ–∫–∏
function findMostSimilarLine(targetLine, fileLines, startLine, endLine) {
    let bestMatch = {
        lineNumber: startLine,
        similarity: Infinity,
    };
    const normalizedTarget = normalizeCode(targetLine);
    // –ò—â–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ¬±30 —Å—Ç—Ä–æ–∫ –æ—Ç –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–π –ø–æ–∑–∏—Ü–∏–∏
    const searchStart = Math.max(0, startLine - 30);
    const searchEnd = Math.min(fileLines.length, endLine + 30);
    for (let i = searchStart; i < searchEnd; i++) {
        const normalizedLine = normalizeCode(fileLines[i]);
        const distance = levenshteinDistance(normalizedTarget, normalizedLine);
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫
        const similarity = distance / Math.max(normalizedTarget.length, normalizedLine.length);
        if (similarity < bestMatch.similarity) {
            bestMatch = {
                lineNumber: i + 1, // +1 –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ —Å 1
                similarity: similarity,
            };
        }
    }
    return bestMatch;
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é DeepSeek API
async function analyzeCodeContent(filePath, content, deepseekApiKey, deepseekApiUrl) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if (content.length > 30000) {
            console.log(`File ${filePath} is too large (${content.length} chars), analyzing first 30000 chars`);
            content = content.slice(0, 30000);
        }
        const lines = content.split('\n');
        const systemPrompt = `–í—ã –æ–ø—ã—Ç–Ω—ã–π —Ä–µ–≤—å—é–µ—Ä React + TypeScript –ø—Ä–æ–µ–∫—Ç–æ–≤.
      –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏ –Ω–∞–π–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–∞–≥–∞–º –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞–º —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.
      
      –ù–ï –ù–£–ñ–ù–û –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å:
      - –°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
      - –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–æ–≤ —Ç–∞–º, –≥–¥–µ –æ–Ω–∏ –æ—á–µ–≤–∏–¥–Ω—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ console.log
      - –ú–µ–ª–∫–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ª–∏–Ω—Ç–µ—Ä–∞
      - –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
      
      –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞:
      - –£—Ç–µ—á–∫–∞—Ö –ø–∞–º—è—Ç–∏
      - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ React —Ö—É–∫–æ–≤
      - –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö race conditions
      - –ü—Ä–æ–±–ª–µ–º–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      - –°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      - –õ–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –≤ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–µ
      
      –í–ê–ñ–ù–û: –î–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–±–ª–µ–º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ:
      1. –¢–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (line)
      2. –°–∞–º—É –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ (code)
      3. –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã (type)
      4. –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (description)
      
      –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
      {
        "issues": [
          {
            "line": number,
            "code": "string", // –¢–æ—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–æ–¥–∞ —Å –ø—Ä–æ–±–ª–µ–º–æ–π
            "type": "quality" | "security" | "performance",
            "description": "string"
          }
        ]
      }`;
        const response = await withRetry(() => (0, node_fetch_1.default)(deepseekApiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${deepseekApiKey}`,
            },
            body: JSON.stringify({
                model: 'deepseek-chat',
                messages: [
                    {
                        role: 'system',
                        content: systemPrompt,
                    },
                    {
                        role: 'user',
                        content: content,
                    },
                ],
                response_format: { type: 'json_object' },
                temperature: 0.3,
                max_tokens: 4000,
            }),
        }));
        if (!response.ok) {
            const errorText = await response.text();
            console.error('DeepSeek API error details:', {
                status: response.status,
                statusText: response.statusText,
                headers: Object.fromEntries(response.headers.entries()),
                body: errorText,
            });
            throw new Error(`DeepSeek API error: ${response.status} ${response.statusText}\n${errorText}`);
        }
        const data = await response.json();
        let analysis;
        try {
            analysis = JSON.parse(data.choices[0].message.content);
        }
        catch (error) {
            console.error('Failed to parse DeepSeek response:', error);
            console.log('Raw response:', data.choices[0].message.content);
            return [];
        }
        if (!analysis.issues || !Array.isArray(analysis.issues)) {
            console.error('Invalid analysis format:', analysis);
            return [];
        }
        // –†–∞–∑–±–∏–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        const fileLines = content.split('\n');
        return analysis.issues
            .filter((issue) => typeof issue.line === 'number' &&
            typeof issue.code === 'string' &&
            typeof issue.type === 'string' &&
            typeof issue.description === 'string')
            .map(issue => {
            // –ò—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂—É—é —Å—Ç—Ä–æ–∫—É
            const match = findMostSimilarLine(issue.code, fileLines, Math.max(0, issue.line - 30), Math.min(fileLines.length, issue.line + 30));
            // –ï—Å–ª–∏ —Å—Ö–æ–¥—Å—Ç–≤–æ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–µ (–±–æ–ª—å—à–µ 0.3), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            if (match.similarity > 0.3) {
                console.log(`Skipping comment for line ${issue.line} due to low similarity (${match.similarity})`);
                return null;
            }
            return {
                path: filePath,
                line: match.lineNumber,
                body: `### ${issue.type === 'quality' ? 'üìù' : issue.type === 'security' ? 'üîí' : '‚ö°'} ${issue.type.charAt(0).toUpperCase() + issue.type.slice(1)}\n${issue.description}\n\n*–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å @ai –∏–ª–∏ /ai*`
            };
        })
            .filter((comment) => comment !== null);
    }
    catch (error) {
        console.error(`Error analyzing file ${filePath}:`, error);
        if (error instanceof Error) {
            console.error('Error stack:', error.stack);
        }
        return [];
    }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –∫–æ–¥–µ
async function generateReplyForComment(filePath, fileContent, line, question, parentComment, deepseekApiKey, deepseekApiUrl) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–¥–∞ (25 —Å—Ç—Ä–æ–∫ –¥–æ –∏ –ø–æ—Å–ª–µ)
        const lines = fileContent.split('\n');
        const startLine = Math.max(0, line - 25);
        const endLine = Math.min(lines.length, line + 25);
        const codeContext = lines.slice(startLine, endLine).join('\n');
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        const typeMatch = parentComment.match(/### (üìù|üîí|‚ö°) (Quality|Security|Performance)/i);
        const type = typeMatch ? typeMatch[2].toLowerCase() : 'quality';
        const response = await withRetry(() => (0, node_fetch_1.default)(deepseekApiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${deepseekApiKey}`,
            },
            body: JSON.stringify({
                model: 'deepseek-chat',
                messages: [
                    {
                        role: 'system',
                        content: `–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞ –¥–ª—è React + TypeScript –ø—Ä–æ–µ–∫—Ç–æ–≤.
              –í—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –ø—Ä–æ–±–ª–µ–º–µ —Ç–∏–ø–∞ "${type}" –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫–æ–¥–µ (—Å—Ç—Ä–æ–∫–∞ ${line}):
              
              \`\`\`typescript
              ${codeContext}
              \`\`\`
              
              –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—ã–ª:
              ${parentComment.split('\n\n')[0]}\n${parentComment.split('\n\n')[1]}
              
              –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å –æ–± —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–µ:
              ${question}
              
              –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±—ä—è—Å–Ω—è—è –ø—Ä–æ–±–ª–µ–º—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞.
              –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–æ–º –∫–æ–¥–∞.
              –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫.`,
                    },
                    {
                        role: 'user',
                        content: question,
                    },
                ],
                temperature: 0.3,
                max_tokens: 2000,
            }),
        }));
        if (!response.ok) {
            throw new Error(`DeepSeek API error: ${response.statusText}`);
        }
        const data = await response.json();
        return data.choices[0].message.content;
    }
    catch (error) {
        console.error('Error generating reply:', error);
        return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.';
    }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –∏–∑ diff
function parseDiffToChangedLines(patch) {
    const changedLines = new Set();
    const diffLines = patch.split('\n');
    let currentLine = 0;
    for (const line of diffLines) {
        if (line.startsWith('@@')) {
            const match = line.match(/@@ -\d+(?:,\d+)? \+(\d+)(?:,\d+)? @@/);
            if (match) {
                currentLine = parseInt(match[1], 10) - 1;
            }
            continue;
        }
        if (line.startsWith('+')) {
            changedLines.add(currentLine);
        }
        if (!line.startsWith('-')) {
            currentLine++;
        }
    }
    return changedLines;
}
