"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeReviewController = void 0;
exports.createControllerFromEnv = createControllerFromEnv;
const adapter_1 = require("./adapter");
const utils_1 = require("./utils");
const dotenv = __importStar(require("dotenv"));
// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();
/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∫–æ–¥-—Ä–µ–≤—å—é
 */
class CodeReviewController {
    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –∫–æ–¥-—Ä–µ–≤—å—é
     * @param config –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
     */
    constructor(config) {
        this.config = config;
        this.platform = (0, adapter_1.createPlatformAdapter)(config.platform, config.platformOptions);
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ Pull Request / Merge Request
     * @param prId ID Pull Request / Merge Request
     */
    async handlePullRequestEvent(prId) {
        console.log(`Analyzing ${this.config.platform === 'github' ? 'PR' : 'MR'} #${prId}...`);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø—É—Å–∫–∏ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã
        const lastAnalyzedCommit = process.env.LAST_ANALYZED_COMMIT;
        console.log(`Last analyzed commit: ${lastAnalyzedCommit || 'none (analyzing entire PR)'}`);
        // –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, —Å —É—á–µ—Ç–æ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
        const files = await this.platform.getChangedFiles(prId, lastAnalyzedCommit);
        console.log(`Found ${files.length} changed files since last analysis`);
        if (files.length === 0) {
            console.log('No new changes to analyze');
            return;
        }
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã, –∏—Å–∫–ª—é—á–∞—è —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –ø–∞—Ç—á–∞
        const filesWithPatches = files.filter(file => !!file.patch);
        if (filesWithPatches.length < files.length) {
            console.log(`${files.length - filesWithPatches.length} files without patches excluded from analysis`);
        }
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        const allComments = [];
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        console.log('==== Detailed file analysis ====');
        for (const file of filesWithPatches) {
            console.log(`Analyzing file: ${file.path}`);
            try {
                // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
                console.log(`File details: ${file.path}`);
                console.log(`Has patch: ${!!file.patch}`);
                console.log(`Commits: ${file.commits ? file.commits.join(', ') : 'unknown'}`);
                if (file.patch) {
                    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –ø–∞—Ç—á–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    const patchPreview = file.patch.split('\n').slice(0, 3).join('\n');
                    console.log(`Patch preview: ${patchPreview}...`);
                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                    const changedLines = (0, utils_1.parseDiffToChangedLines)(file.patch);
                    console.log(`Changed lines: ${[...changedLines].slice(0, 10).join(', ')}${changedLines.size > 10 ? '...' : ''}`);
                }
                // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                const fileComments = await (0, utils_1.analyzeCodeContent)(file.path, file.content, this.config.deepseekApiKey, this.config.deepseekApiUrl);
                // –¢–µ–ø–µ—Ä—å –º—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏–º–µ–µ–º —Ñ–∞–π–ª —Å –ø–∞—Ç—á–µ–º
                const changedLines = (0, utils_1.parseDiffToChangedLines)(file.patch);
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                for (const comment of fileComments) {
                    const inChangedLines = changedLines.has(comment.line);
                    console.log(`Comment for line ${comment.line}: ${inChangedLines ? 'VALID (in changed lines)' : 'SKIPPED (not in changed lines)'}`);
                }
                const validComments = fileComments.filter(comment => changedLines.has(comment.line));
                console.log(`Found ${fileComments.length} issues, ${validComments.length} in changed lines`);
                allComments.push(...validComments);
            }
            catch (error) {
                console.error(`Error analyzing file ${file.path}:`, error);
                if (error instanceof Error) {
                    console.error('Error stack:', error.stack);
                }
            }
        }
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π HEAD –∫–æ–º–º–∏—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        let headCommit = null;
        try {
            headCommit = await this.platform.getCurrentCommit(prId);
            console.log(`Current HEAD commit: ${headCommit}`);
        }
        catch (error) {
            console.error('Failed to get current commit:', error);
        }
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–≤—å—é —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
        if (allComments.length > 0) {
            console.log(`Creating ${allComments.length} review comments`);
            // –õ–æ–≥–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
            const commentsByFile = {};
            for (const comment of allComments) {
                commentsByFile[comment.path] = (commentsByFile[comment.path] || 0) + 1;
            }
            console.log('Comment distribution by file:');
            for (const [path, count] of Object.entries(commentsByFile)) {
                console.log(`- ${path}: ${count} comments`);
            }
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫–æ–º–º–∏—Ç–µ –≤ —Ä–µ–≤—å—é, —á—Ç–æ–±—ã –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–º–º–∏—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ
            if (headCommit) {
                console.log(`Adding review with comment to track current commit: ${headCommit}`);
                // –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º –∫–æ–º–º–∏—Ç–µ
                // allComments.push({
                //   path: allComments[0].path,
                //   line: allComments[0].line,
                //   body: `AI Review completed for commit ${headCommit}`
                // });
            }
            await this.platform.createReview(prId, allComments);
            console.log('Review created successfully');
            // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
            if (headCommit) {
                console.log('===========================================');
                console.log('To only analyze new changes in future runs:');
                console.log(`export LAST_ANALYZED_COMMIT=${headCommit}`);
                console.log('===========================================');
            }
        }
        else {
            console.log('No issues found, no review created');
        }
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ PR/MR
     * @param commentId ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
     */
    async handleCommentEvent(commentId) {
        console.log(`Processing comment ${commentId}...`);
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            const comment = await this.platform.getComment(commentId);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É
            if (!comment.body.match(/^(@ai|\/ai)\s/i)) {
                console.log('Comment does not start with @ai or /ai, ignoring');
                return;
            }
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ PR/MR
            const allComments = await this.platform.listComments(comment.prId);
            // –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –±–æ—Ç–∞ –≤ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ
            const parentComment = allComments
                .reverse()
                .find(c => c.id !== comment.id &&
                c.path === comment.path &&
                c.line === comment.line &&
                c.body.match(/### (üìù|üîí|‚ö°) (Quality|Security|Performance)/i));
            if (!parentComment) {
                console.error('Could not find parent bot comment');
                return;
            }
            // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            // –í GitLab MR, –≤ GitHub PR
            const ref = this.config.platform === 'github'
                ? `pull/${comment.prId}/head`
                : `refs/merge-requests/${comment.prId}/head`;
            const fileContent = await this.platform.getFileContent(comment.path, ref);
            // –£–±–∏—Ä–∞–µ–º @ai –∏–ª–∏ /ai –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
            const question = comment.body.replace(/^(@ai|\/ai)\s+/i, '');
            console.log('Generating reply...');
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            const answer = await (0, utils_1.generateReplyForComment)(comment.path, fileContent, comment.line, question, parentComment.body, this.config.deepseekApiKey, this.config.deepseekApiUrl);
            console.log('Sending reply...');
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            const replyBody = `> ${question}\n\n${answer}\n\n*–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å @ai –∏–ª–∏ /ai*`;
            await this.platform.replyToComment(comment.prId, commentId, replyBody);
            console.log('Reply sent successfully');
        }
        catch (error) {
            console.error('Error handling comment:', error);
        }
    }
    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
     * @param eventType –¢–∏–ø —Å–æ–±—ã—Ç–∏—è ('pull_request', 'merge_request', 'comment', 'note')
     * @param eventData –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    async processEvent(eventType, eventData) {
        console.log(`Processing ${eventType} event`);
        try {
            switch (eventType) {
                case 'pull_request': // GitHub
                    await this.handlePullRequestEvent(eventData.pull_request.number);
                    break;
                case 'merge_request': // GitLab
                    await this.handlePullRequestEvent(eventData.object_attributes.iid);
                    break;
                case 'pull_request_review_comment': // GitHub comment
                    await this.handleCommentEvent(eventData.comment.id);
                    break;
                case 'note': // GitLab comment
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ MR, –∞ –Ω–µ –∫ Issue –∏–ª–∏ Commit
                    if (eventData.object_attributes.noteable_type === 'MergeRequest') {
                        // –í GitLab –º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞—Ç—å —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                        const commentId = `${eventData.merge_request.iid}:${eventData.object_attributes.discussion_id}:${eventData.object_attributes.id}`;
                        await this.handleCommentEvent(commentId);
                    }
                    else {
                        console.log(`Ignoring note for ${eventData.object_attributes.noteable_type}`);
                    }
                    break;
                default:
                    console.log(`Unsupported event type: ${eventType}`);
            }
        }
        catch (error) {
            console.error('Error processing event:', error);
            throw error;
        }
    }
}
exports.CodeReviewController = CodeReviewController;
/**
 * –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
function createControllerFromEnv() {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;
    const DEEPSEEK_API_URL = process.env.DEEPSEEK_API_URL || 'https://api.deepseek.com/v1/chat/completions';
    if (!DEEPSEEK_API_KEY) {
        throw new Error('DEEPSEEK_API_KEY is required');
    }
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    if (process.env.GITHUB_TOKEN && process.env.GITHUB_REPOSITORY) {
        // GitHub –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        return new CodeReviewController({
            platform: 'github',
            platformOptions: {
                token: process.env.GITHUB_TOKEN,
                repository: process.env.GITHUB_REPOSITORY,
            },
            deepseekApiKey: DEEPSEEK_API_KEY,
            deepseekApiUrl: DEEPSEEK_API_URL,
        });
    }
    else if (process.env.GITLAB_TOKEN && process.env.GITLAB_PROJECT_ID) {
        // GitLab –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        return new CodeReviewController({
            platform: 'gitlab',
            platformOptions: {
                token: process.env.GITLAB_TOKEN,
                projectId: process.env.GITLAB_PROJECT_ID,
                apiUrl: process.env.GITLAB_API_URL || 'https://gitlab.com/api/v4',
            },
            deepseekApiKey: DEEPSEEK_API_KEY,
            deepseekApiUrl: DEEPSEEK_API_URL,
        });
    }
    else {
        throw new Error('Missing platform configuration. Set either GITHUB_TOKEN and GITHUB_REPOSITORY or GITLAB_TOKEN and GITLAB_PROJECT_ID');
    }
}
